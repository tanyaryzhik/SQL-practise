// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Entity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("brands","production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BrandFirst"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BrandSecond"
                        });
                });

            modelBuilder.Entity("Model.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("category_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("categories","production");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "CategoryFirst"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CategorySecond"
                        });
                });

            modelBuilder.Entity("Model.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("customers","sales");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            City = "Akron",
                            Email = "allanpau@gmail.com",
                            FirstName = "Allan",
                            LastName = "Pau",
                            Phone = "54698",
                            State = "Ohio",
                            Street = "3rd St",
                            ZipCode = 25641
                        },
                        new
                        {
                            Id = 10,
                            City = "Los Angeles",
                            Email = "katyperry@gmail.com",
                            FirstName = "Katy",
                            LastName = "Perry",
                            Phone = "25489",
                            State = "California",
                            Street = "4th St",
                            ZipCode = 26543
                        });
                });

            modelBuilder.Entity("Model.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnName("order_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnName("order_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnName("required_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnName("shipped_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("orders","sales");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            CustomerId = 10,
                            OrderDate = new DateTime(2020, 3, 16, 18, 1, 5, 903, DateTimeKind.Local).AddTicks(3197),
                            OrderStatus = "Pending",
                            RequiredDate = new DateTime(2020, 3, 16, 18, 1, 5, 906, DateTimeKind.Local).AddTicks(2979),
                            ShippedDate = new DateTime(2020, 3, 16, 18, 1, 5, 906, DateTimeKind.Local).AddTicks(3692),
                            StaffId = 12,
                            StoreId = 7
                        },
                        new
                        {
                            Id = 14,
                            CustomerId = 9,
                            OrderDate = new DateTime(2020, 3, 16, 18, 1, 5, 906, DateTimeKind.Local).AddTicks(5472),
                            OrderStatus = "Pending",
                            RequiredDate = new DateTime(2020, 3, 16, 18, 1, 5, 906, DateTimeKind.Local).AddTicks(5496),
                            ShippedDate = new DateTime(2020, 3, 16, 18, 1, 5, 906, DateTimeKind.Local).AddTicks(5508),
                            StaffId = 11,
                            StoreId = 8
                        });
                });

            modelBuilder.Entity("Model.Entity.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items","sales");

                    b.HasData(
                        new
                        {
                            OrderId = 13,
                            ProductId = 5,
                            Discount = 0,
                            Price = 52m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 14,
                            ProductId = 6,
                            Discount = 0,
                            Price = 100m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Model.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<int>("ModelYear")
                        .HasColumnName("model_year")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("product_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products","production");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            CategoryId = 3,
                            ModelYear = 2000,
                            Name = "ProductFirst",
                            Price = 200.50m
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 2,
                            CategoryId = 4,
                            ModelYear = 2010,
                            Name = "ProductSecond",
                            Price = 400.50m
                        });
                });

            modelBuilder.Entity("Model.Entity.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("staffs","sales");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Active = true,
                            Email = "jimkerry@gmail.com",
                            FirstName = "Jim",
                            LastName = "Kerry",
                            ManagerId = 20,
                            Phone = "2598",
                            StoreId = 7
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            Email = "katylerry@gmail.com",
                            FirstName = "Katy",
                            LastName = "lerry",
                            ManagerId = 20,
                            Phone = "3654",
                            StoreId = 8
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            Email = "katyJerry@gmail.com",
                            FirstName = "Katy",
                            LastName = "Jerry",
                            ManagerId = 0,
                            Phone = "3654",
                            StoreId = 8
                        });
                });

            modelBuilder.Entity("Model.Entity.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stocks","production");

                    b.HasData(
                        new
                        {
                            StoreId = 7,
                            ProductId = 6,
                            Quantity = 5
                        },
                        new
                        {
                            StoreId = 8,
                            ProductId = 5,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("Model.Entity.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoretName")
                        .HasColumnName("store_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("stores","sales");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            City = "New York",
                            Email = "firststore@gmail.com",
                            Phone = "12345",
                            State = "WashingtonDC",
                            StoretName = "StoreFirst",
                            Street = "1st Ave",
                            ZipCode = 25364
                        },
                        new
                        {
                            Id = 8,
                            City = "Dallas",
                            Email = "secondstore@gmail.com",
                            Phone = "678910",
                            State = "Texas",
                            StoretName = "StoreSecond",
                            Street = "2nd Ave",
                            ZipCode = 52147
                        });
                });

            modelBuilder.Entity("Model.Entity.Order", b =>
                {
                    b.HasOne("Model.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Model.Entity.OrderItem", b =>
                {
                    b.HasOne("Model.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Product", b =>
                {
                    b.HasOne("Model.Entity.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Staff", b =>
                {
                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Stock", b =>
                {
                    b.HasOne("Model.Entity.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
